{
  "BackgroundLayer": {
    "description": "",
    "methods": [],
    "props": [
      {
        "name": "id",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "A string that uniquely identifies the source in the style to which it is added."
      },
      {
        "name": "sourceID",
        "required": false,
        "type": "string",
        "default": "MapboxGL.StyleSource.DefaultSourceID",
        "description": "The source from which to obtain the data to style. If the source has not yet been added to the current style, the behavior is undefined."
      },
      {
        "name": "sourceLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Identifier of the layer within the source identified by the sourceID property from which the receiver obtains the data to style."
      },
      {
        "name": "aboveLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer above aboveLayerID."
      },
      {
        "name": "belowLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer below belowLayerID"
      },
      {
        "name": "layerIndex",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Inserts a layer at a specified index"
      },
      {
        "name": "filter",
        "required": false,
        "type": "array",
        "default": "none",
        "description": "Filter only the features in the source layer that satisfy a condition that you define"
      },
      {
        "name": "minZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The minimum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "maxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The maximum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "style",
        "required": false,
        "type": "custom",
        "default": "none",
        "description": "Customizable style attributes"
      }
    ],
    "name": "BackgroundLayer",
    "styles": [
      {
        "name": "visibility",
        "type": "enum",
        "description": "Whether this layer is displayed.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "backgroundColor",
        "type": "color",
        "description": "The color with which the background will be drawn.",
        "requires": [],
        "disabledBy": [
          "background-pattern"
        ]
      },
      {
        "name": "backgroundPattern",
        "type": "string",
        "description": "Name of image in sprite to use for drawing an image background. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512).",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "backgroundOpacity",
        "type": "number",
        "description": "The opacity at which the background will be drawn.",
        "requires": [],
        "disabledBy": []
      }
    ]
  },
  "CircleLayer": {
    "description": "CircleLayer is a style layer that renders one or more filled circles on the map.",
    "methods": [],
    "props": [
      {
        "name": "id",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "A string that uniquely identifies the source in the style to which it is added."
      },
      {
        "name": "sourceID",
        "required": false,
        "type": "string",
        "default": "MapboxGL.StyleSource.DefaultSourceID",
        "description": "The source from which to obtain the data to style.\nIf the source has not yet been added to the current style, the behavior is undefined."
      },
      {
        "name": "sourceLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Identifier of the layer within the source identified by the sourceID property\nfrom which the receiver obtains the data to style."
      },
      {
        "name": "aboveLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer above aboveLayerID."
      },
      {
        "name": "belowLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer below belowLayerID"
      },
      {
        "name": "layerIndex",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Inserts a layer at a specified index"
      },
      {
        "name": "filter",
        "required": false,
        "type": "array",
        "default": "none",
        "description": "Filter only the features in the source layer that satisfy a condition that you define"
      },
      {
        "name": "minZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The minimum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "maxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The maximum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "style",
        "required": false,
        "type": "custom",
        "default": "none",
        "description": "Customizable style attributes"
      }
    ],
    "name": "CircleLayer",
    "styles": [
      {
        "name": "visibility",
        "type": "enum",
        "description": "Whether this layer is displayed.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "circleRadius",
        "type": "number",
        "description": "Circle radius.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "circleColor",
        "type": "color",
        "description": "The fill color of the circle.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "circleBlur",
        "type": "number",
        "description": "Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "circleOpacity",
        "type": "number",
        "description": "The opacity at which the circle will be drawn.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "circleTranslate",
        "type": "array",
        "description": "The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "circleTranslateAnchor",
        "type": "enum",
        "description": "Controls the translation reference point.",
        "requires": [
          "circle-translate"
        ],
        "disabledBy": []
      },
      {
        "name": "circlePitchScale",
        "type": "enum",
        "description": "Controls the scaling behavior of the circle when the map is pitched.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "circleStrokeWidth",
        "type": "number",
        "description": "The width of the circle's stroke. Strokes are placed outside of the `circle-radius`.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "circleStrokeColor",
        "type": "color",
        "description": "The stroke color of the circle.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "circleStrokeOpacity",
        "type": "number",
        "description": "The opacity of the circle's stroke.",
        "requires": [],
        "disabledBy": []
      }
    ]
  },
  "FillExtrusionLayer": {
    "description": "FillExtrusionLayer is a style layer that renders one or more 3D extruded polygons on the map.",
    "methods": [],
    "props": [
      {
        "name": "id",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "A string that uniquely identifies the source in the style to which it is added."
      },
      {
        "name": "sourceID",
        "required": false,
        "type": "string",
        "default": "MapboxGL.StyleSource.DefaultSourceID",
        "description": "The source from which to obtain the data to style. If the source has not yet been added to the current style, the behavior is undefined."
      },
      {
        "name": "sourceLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Identifier of the layer within the source identified by the sourceID property from which the receiver obtains the data to style."
      },
      {
        "name": "aboveLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer above aboveLayerID."
      },
      {
        "name": "belowLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer below belowLayerID"
      },
      {
        "name": "layerIndex",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Inserts a layer at a specified index"
      },
      {
        "name": "filter",
        "required": false,
        "type": "array",
        "default": "none",
        "description": "Filter only the features in the source layer that satisfy a condition that you define"
      },
      {
        "name": "minZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The minimum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "maxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The maximum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "style",
        "required": false,
        "type": "custom",
        "default": "none",
        "description": "Customizable style attributes"
      }
    ],
    "name": "FillExtrusionLayer",
    "styles": [
      {
        "name": "visibility",
        "type": "enum",
        "description": "Whether this layer is displayed.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "fillExtrusionOpacity",
        "type": "number",
        "description": "The opacity of the entire fill extrusion layer. This is rendered on a per-layer, not per-feature, basis, and data-driven styling is not available.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "fillExtrusionColor",
        "type": "color",
        "description": "The base color of the extruded fill. The extrusion's surfaces will be shaded differently based on this color in combination with the root `light` settings. If this color is specified as `rgba` with an alpha component, the alpha component will be ignored; use `fill-extrusion-opacity` to set layer opacity.",
        "requires": [],
        "disabledBy": [
          "fill-extrusion-pattern"
        ]
      },
      {
        "name": "fillExtrusionTranslate",
        "type": "array",
        "description": "The geometry's offset. Values are [x, y] where negatives indicate left and up (on the flat plane), respectively.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "fillExtrusionTranslateAnchor",
        "type": "enum",
        "description": "Controls the translation reference point.",
        "requires": [
          "fill-extrusion-translate"
        ],
        "disabledBy": []
      },
      {
        "name": "fillExtrusionPattern",
        "type": "string",
        "description": "Name of image in sprite to use for drawing images on extruded fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512).",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "fillExtrusionHeight",
        "type": "number",
        "description": "The height with which to extrude this layer.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "fillExtrusionBase",
        "type": "number",
        "description": "The height with which to extrude the base of this layer. Must be less than or equal to `fill-extrusion-height`.",
        "requires": [
          "fill-extrusion-height"
        ],
        "disabledBy": []
      }
    ]
  },
  "FillLayer": {
    "description": "FillLayer is a style layer that renders one or more filled (and optionally stroked) polygons on the map.",
    "methods": [],
    "props": [
      {
        "name": "id",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "A string that uniquely identifies the source in the style to which it is added."
      },
      {
        "name": "sourceID",
        "required": false,
        "type": "string",
        "default": "MapboxGL.StyleSource.DefaultSourceID",
        "description": "The source from which to obtain the data to style. If the source has not yet been added to the current style, the behavior is undefined."
      },
      {
        "name": "aboveLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer above aboveLayerID."
      },
      {
        "name": "belowLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer below belowLayerID"
      },
      {
        "name": "layerIndex",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Inserts a layer at a specified index"
      },
      {
        "name": "filter",
        "required": false,
        "type": "array",
        "default": "none",
        "description": "Filter only the features in the source layer that satisfy a condition that you define"
      },
      {
        "name": "minZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The minimum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "maxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The maximum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "style",
        "required": false,
        "type": "custom",
        "default": "none",
        "description": "Customizable style attributes"
      }
    ],
    "name": "FillLayer",
    "styles": [
      {
        "name": "visibility",
        "type": "enum",
        "description": "Whether this layer is displayed.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "fillAntialias",
        "type": "boolean",
        "description": "Whether or not the fill should be antialiased.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "fillOpacity",
        "type": "number",
        "description": "The opacity of the entire fill layer. In contrast to the `fill-color`, this value will also affect the 1px stroke around the fill, if the stroke is used.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "fillColor",
        "type": "color",
        "description": "The color of the filled part of this layer. This color can be specified as `rgba` with an alpha component and the color's opacity will not affect the opacity of the 1px stroke, if it is used.",
        "requires": [],
        "disabledBy": [
          "fill-pattern"
        ]
      },
      {
        "name": "fillOutlineColor",
        "type": "color",
        "description": "The outline color of the fill. Matches the value of `fill-color` if unspecified.",
        "requires": [],
        "disabledBy": [
          "fill-pattern"
        ]
      },
      {
        "name": "fillTranslate",
        "type": "array",
        "description": "The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "fillTranslateAnchor",
        "type": "enum",
        "description": "Controls the translation reference point.",
        "requires": [
          "fill-translate"
        ],
        "disabledBy": []
      },
      {
        "name": "fillPattern",
        "type": "string",
        "description": "Name of image in sprite to use for drawing image fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512).",
        "requires": [],
        "disabledBy": []
      }
    ]
  },
  "Light": {
    "description": "Light represents the light source for extruded geometries",
    "methods": [],
    "props": [
      {
        "name": "style",
        "required": false,
        "type": "custom",
        "default": "none",
        "description": "Customizable style attributes"
      }
    ],
    "name": "Light",
    "styles": [
      {
        "name": "anchor",
        "type": "enum",
        "description": "Whether extruded geometries are lit relative to the map or viewport.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "position",
        "type": "array",
        "description": "Position of the light source relative to lit (extruded) geometries, in [r radial coordinate, a azimuthal angle, p polar angle] where r indicates the distance from the center of the base of an object to its light, a indicates the position of the light relative to 0° (0° when `light.anchor` is set to `viewport` corresponds to the top of the viewport, or 0° when `light.anchor` is set to `map` corresponds to due north, and degrees proceed clockwise), and p indicates the height of the light (from 0°, directly above, to 180°, directly below).",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "color",
        "type": "color",
        "description": "Color tint for lighting extruded geometries.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "intensity",
        "type": "number",
        "description": "Intensity of lighting (on a scale from 0 to 1). Higher numbers will present as more extreme contrast.",
        "requires": [],
        "disabledBy": []
      }
    ]
  },
  "LineLayer": {
    "description": "LineLayer is a style layer that renders one or more stroked polylines on the map.",
    "methods": [],
    "props": [
      {
        "name": "id",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "A string that uniquely identifies the source in the style to which it is added."
      },
      {
        "name": "sourceID",
        "required": false,
        "type": "string",
        "default": "MapboxGL.StyleSource.DefaultSourceID",
        "description": "The source from which to obtain the data to style.\nIf the source has not yet been added to the current style, the behavior is undefined."
      },
      {
        "name": "sourceLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Identifier of the layer within the source identified by the sourceID property from which the receiver obtains the data to style."
      },
      {
        "name": "aboveLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer above aboveLayerID."
      },
      {
        "name": "belowLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer below belowLayerID"
      },
      {
        "name": "layerIndex",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Inserts a layer at a specified index"
      },
      {
        "name": "filter",
        "required": false,
        "type": "array",
        "default": "none",
        "description": "Filter only the features in the source layer that satisfy a condition that you define"
      },
      {
        "name": "minZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The minimum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "maxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The maximum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "style",
        "required": false,
        "type": "custom",
        "default": "none",
        "description": "Customizable style attributes"
      }
    ],
    "name": "LineLayer",
    "styles": [
      {
        "name": "lineCap",
        "type": "enum",
        "description": "The display of line endings.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "lineJoin",
        "type": "enum",
        "description": "The display of lines when joining.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "lineMiterLimit",
        "type": "number",
        "description": "Used to automatically convert miter joins to bevel joins for sharp angles.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "lineRoundLimit",
        "type": "number",
        "description": "Used to automatically convert round joins to miter joins for shallow angles.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "visibility",
        "type": "enum",
        "description": "Whether this layer is displayed.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "lineOpacity",
        "type": "number",
        "description": "The opacity at which the line will be drawn.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "lineColor",
        "type": "color",
        "description": "The color with which the line will be drawn.",
        "requires": [],
        "disabledBy": [
          "line-pattern"
        ]
      },
      {
        "name": "lineTranslate",
        "type": "array",
        "description": "The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "lineTranslateAnchor",
        "type": "enum",
        "description": "Controls the translation reference point.",
        "requires": [
          "line-translate"
        ],
        "disabledBy": []
      },
      {
        "name": "lineWidth",
        "type": "number",
        "description": "Stroke thickness.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "lineGapWidth",
        "type": "number",
        "description": "Draws a line casing outside of a line's actual path. Value indicates the width of the inner gap.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "lineOffset",
        "type": "number",
        "description": "The line's offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "lineBlur",
        "type": "number",
        "description": "Blur applied to the line, in pixels.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "lineDasharray",
        "type": "array",
        "description": "Specifies the lengths of the alternating dashes and gaps that form the dash pattern. The lengths are later scaled by the line width. To convert a dash length to pixels, multiply the length by the current line width.",
        "requires": [],
        "disabledBy": [
          "line-pattern"
        ]
      },
      {
        "name": "linePattern",
        "type": "string",
        "description": "Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, ..., 512).",
        "requires": [],
        "disabledBy": []
      }
    ]
  },
  "MapView": {
    "description": "MapView backed by Mapbox Native GL",
    "methods": [
      {
        "name": "queryRenderedFeaturesAtPoint",
        "docblock": "[queryRenderedFeaturesAtPoint description]\n@param  {Array<Number>} coordinate - coordinate\n@param  {Array<String>} filter - filter\n@param  {Array<String>} layerIDs - layerIDs\n@return {FeatureCollection}",
        "modifiers": [
          "async"
        ],
        "params": [
          {
            "name": "coordinate",
            "description": "coordinate",
            "type": {
              "name": "Array"
            }
          },
          {
            "name": "filter",
            "description": "filter",
            "type": {
              "name": "Array"
            }
          },
          {
            "name": "layerIDs",
            "description": "layerIDs",
            "type": {
              "name": "Array"
            }
          }
        ],
        "returns": {
          "description": null,
          "type": {
            "name": "FeatureCollection"
          }
        },
        "description": "[queryRenderedFeaturesAtPoint description]",
        "examples": []
      },
      {
        "name": "queryRenderedFeaturesInRect",
        "docblock": "[queryRenderedFeaturesInRect description]\n@param  {Array<Number>} bbox     [description]\n@param  {Array<String>} filters  [description]\n@param  {Array<String>} layerIDs [description]\n@return {FeatureCollection}",
        "modifiers": [
          "async"
        ],
        "params": [
          {
            "name": "bbox",
            "description": "[description]",
            "type": {
              "name": "Array"
            }
          },
          {
            "name": "filter"
          },
          {
            "name": "layerIDs",
            "description": "[description]",
            "type": {
              "name": "Array"
            }
          }
        ],
        "returns": {
          "description": null,
          "type": {
            "name": "FeatureCollection"
          }
        },
        "description": "[queryRenderedFeaturesInRect description]",
        "examples": []
      },
      {
        "name": "fitBounds",
        "docblock": "Map camera transitions to fit provided bounds\n\n@example\nthis.map.fitBounds([lng, lat], [lng, lat])\nthis.map.fitBounds([lng, lat], [lng, lat], 20, 1000)\n\n@param {Array<Number>} northEastCoordinates - North east coordinate of bound\n@param {Array<Number>} southWestCoordinates - South west coordinate of bound\n@param {(Number|Array<Number>)=} padding - Camera padding for bound\n@param {Number=} duration - Duration of camera animation\n@return {void}",
        "modifiers": [],
        "params": [
          {
            "name": "northEastCoordinates",
            "description": "North east coordinate of bound",
            "type": {
              "name": "Array"
            }
          },
          {
            "name": "southWestCoordinates",
            "description": "South west coordinate of bound",
            "type": {
              "name": "Array"
            }
          },
          {
            "name": "padding",
            "description": "Camera padding for bound",
            "type": {},
            "optional": true
          },
          {
            "name": "duration",
            "description": "Duration of camera animation",
            "type": {
              "name": "Number"
            },
            "optional": true
          }
        ],
        "returns": {
          "description": null,
          "type": {
            "name": "void"
          }
        },
        "description": "Map camera transitions to fit provided bounds",
        "examples": [
          "\nthis.map.fitBounds([lng, lat], [lng, lat])\nthis.map.fitBounds([lng, lat], [lng, lat], 20, 1000)\n\n"
        ]
      },
      {
        "name": "flyTo",
        "docblock": "Map camera will fly to new coordinate\n\n@example\nthis.map.flyTo([lng, lat])\nthis.map.flyTo([lng, lat], 12000)\n\n @param {Array<Number>} coordinates - Coordinates that map camera will jump too\n @param {Number=} duration - Duration of camera animation\n @return {void}",
        "modifiers": [],
        "params": [
          {
            "name": "coordinates",
            "description": "Coordinates that map camera will jump too",
            "type": {
              "name": "Array"
            }
          },
          {
            "name": "duration",
            "description": "Duration of camera animation",
            "type": {
              "name": "Number"
            },
            "optional": true
          }
        ],
        "returns": {
          "description": null,
          "type": {
            "name": "void"
          }
        },
        "description": "Map camera will fly to new coordinate",
        "examples": [
          "\nthis.map.flyTo([lng, lat])\nthis.map.flyTo([lng, lat], 12000)\n\n "
        ]
      },
      {
        "name": "zoomTo",
        "docblock": "Map camera will zoom to specified level\n\n@example\nthis.map.zoomTo(16)\nthis.map.zoomTo(16, 100)\n\n@param {Number} zoomLevel - Zoom level that the map camera will animate too\n@param {Number=} duration - Duration of camera animation\n@return {void}",
        "modifiers": [],
        "params": [
          {
            "name": "zoomLevel",
            "description": "Zoom level that the map camera will animate too",
            "type": {
              "name": "Number"
            }
          },
          {
            "name": "duration",
            "description": "Duration of camera animation",
            "type": {
              "name": "Number"
            },
            "optional": true
          }
        ],
        "returns": {
          "description": null,
          "type": {
            "name": "void"
          }
        },
        "description": "Map camera will zoom to specified level",
        "examples": [
          "\nthis.map.zoomTo(16)\nthis.map.zoomTo(16, 100)\n\n"
        ]
      },
      {
        "name": "setCamera",
        "docblock": "Map camera will perform updates based on provided config. Advanced use only!\n\n@example\nthis.map.setCamera({\n  centerCoordinate: [lng, lat],\n  zoomLevel: 16,\n  duration: 2000,\n})\n\nthis.map.setCamera({\n  stops: [\n    { pitch: 45, duration: 200 },\n    { heading: 180, duration: 300 },\n  ]\n})\n\n @param {Object} config - Camera configuration",
        "modifiers": [],
        "params": [
          {
            "name": "config",
            "description": "Camera configuration",
            "type": {
              "name": "Object"
            }
          }
        ],
        "returns": null,
        "description": "Map camera will perform updates based on provided config. Advanced use only!",
        "examples": [
          "\nthis.map.setCamera({\n  centerCoordinate: [lng, lat],\n  zoomLevel: 16,\n  duration: 2000,\n})\n\nthis.map.setCamera({\n  stops: [\n    { pitch: 45, duration: 200 },\n    { heading: 180, duration: 300 },\n  ]\n})\n\n "
        ]
      }
    ],
    "props": [
      {
        "name": "animated",
        "required": false,
        "type": "bool",
        "default": "false",
        "description": "Animates changes between pitch and bearing"
      },
      {
        "name": "centerCoordinate",
        "required": false,
        "type": "arrayOf",
        "default": "none",
        "description": "Initial center coordinate on map [lng, lat]"
      },
      {
        "name": "showUserLocation",
        "required": false,
        "type": "bool",
        "default": "none",
        "description": "Shows the users location on the map"
      },
      {
        "name": "userTrackingMode",
        "required": false,
        "type": "number",
        "default": "MapboxGL.UserTrackingModes.None",
        "description": "The mode used to track the user location on the map"
      },
      {
        "name": "heading",
        "required": false,
        "type": "number",
        "default": "0",
        "description": "Initial heading on map"
      },
      {
        "name": "pitch",
        "required": false,
        "type": "number",
        "default": "0",
        "description": "Initial pitch on map"
      },
      {
        "name": "style",
        "required": false,
        "type": "any",
        "default": "none",
        "description": "Style for wrapping React Native View"
      },
      {
        "name": "styleURL",
        "required": false,
        "type": "string",
        "default": "MapboxGL.StyleURL.Street",
        "description": "Style URL for map"
      },
      {
        "name": "zoomLevel",
        "required": false,
        "type": "number",
        "default": "16",
        "description": "Initial zoom level of map"
      },
      {
        "name": "minZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Min zoom level of map"
      },
      {
        "name": "maxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Max zoom level of map"
      },
      {
        "name": "scrollEnabled",
        "required": false,
        "type": "bool",
        "default": "true",
        "description": "Enable/Disable scroll on the map"
      },
      {
        "name": "pitchEnabled",
        "required": false,
        "type": "bool",
        "default": "true",
        "description": "Enable/Disable pitch on map"
      },
      {
        "name": "rotateEnabled",
        "required": false,
        "type": "bool",
        "default": "true",
        "description": "Enable/Disable rotation on map"
      },
      {
        "name": "attributionEnabled",
        "required": false,
        "type": "bool",
        "default": "true",
        "description": "Enable/Disable attribution on map. For iOS you need to add MGLMapboxMetricsEnabledSettingShownInApp=YES\nto your Info.plist"
      },
      {
        "name": "logoEnabled",
        "required": false,
        "type": "bool",
        "default": "true",
        "description": "Enable/Disable the logo on the map."
      },
      {
        "name": "onPress",
        "required": false,
        "type": "func",
        "default": "none",
        "description": "Map press listener, gets called when a user presses the map"
      },
      {
        "name": "onLongPress",
        "required": false,
        "type": "func",
        "default": "none",
        "description": "Map long press listener, gets called when a user long presses the map"
      },
      {
        "name": "onRegionWillChange",
        "required": false,
        "type": "func",
        "default": "none",
        "description": "This event is triggered whenever the currently displayed map region is about to change."
      },
      {
        "name": "onRegionIsChanging",
        "required": false,
        "type": "func",
        "default": "none",
        "description": "This event is triggered whenever the currently displayed map region is changing."
      },
      {
        "name": "onRegionDidChange",
        "required": false,
        "type": "func",
        "default": "none",
        "description": "This event is triggered whenever the currently displayed map region finished changing"
      },
      {
        "name": "onWillStartLoadingMap",
        "required": false,
        "type": "func",
        "default": "none",
        "description": "This event is triggered when the map is about to start loading a new map style."
      },
      {
        "name": "onDidFinishLoadingMap",
        "required": false,
        "type": "func",
        "default": "none",
        "description": "This is triggered when the map has successfully loaded a new map style."
      },
      {
        "name": "onDidFailLoadingMap",
        "required": false,
        "type": "func",
        "default": "none",
        "description": "This event is triggered when the map has failed to load a new map style."
      },
      {
        "name": "onWillStartRenderingFrame",
        "required": false,
        "type": "func",
        "default": "none",
        "description": "This event is triggered when the map will start rendering a frame."
      },
      {
        "name": "onDidFinishRenderingFrame",
        "required": false,
        "type": "func",
        "default": "none",
        "description": "This event is triggered when the map finished rendering a frame."
      },
      {
        "name": "onDidFinishRenderingFrameFully",
        "required": false,
        "type": "func",
        "default": "none",
        "description": "This event is triggered when the map fully finished rendering a frame."
      },
      {
        "name": "onWillStartRenderingMap",
        "required": false,
        "type": "func",
        "default": "none",
        "description": "This event is triggered when the map will start rendering the map."
      },
      {
        "name": "onDidFinishRenderingMap",
        "required": false,
        "type": "func",
        "default": "none",
        "description": "This event is triggered when the map finished rendering the map."
      },
      {
        "name": "onDidFinishRenderingMapFully",
        "required": false,
        "type": "func",
        "default": "none",
        "description": "This event is triggered when the map fully finished rendering the map."
      },
      {
        "name": "onDidFinishLoadingStyle",
        "required": false,
        "type": "func",
        "default": "none",
        "description": "This event is triggered when a style has finished loading."
      },
      {
        "name": "onFlyToComplete",
        "required": false,
        "type": "func",
        "default": "none",
        "description": "This event is triggered when a fly to animation is cancelled or completed after calling flyTo"
      },
      {
        "name": "onSetCameraComplete",
        "required": false,
        "type": "func",
        "default": "none",
        "description": "This event is triggered once the camera is finished after calling setCamera"
      }
    ],
    "name": "MapView"
  },
  "RasterLayer": {
    "description": "",
    "methods": [],
    "props": [
      {
        "name": "id",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "A string that uniquely identifies the source in the style to which it is added."
      },
      {
        "name": "sourceID",
        "required": false,
        "type": "string",
        "default": "MapboxGL.StyleSource.DefaultSourceID",
        "description": "The source from which to obtain the data to style. If the source has not yet been added to the current style, the behavior is undefined."
      },
      {
        "name": "sourceLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Identifier of the layer within the source identified by the sourceID property from which the receiver obtains the data to style."
      },
      {
        "name": "aboveLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer above aboveLayerID."
      },
      {
        "name": "belowLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer below belowLayerID"
      },
      {
        "name": "layerIndex",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Inserts a layer at a specified index"
      },
      {
        "name": "filter",
        "required": false,
        "type": "array",
        "default": "none",
        "description": "Filter only the features in the source layer that satisfy a condition that you define"
      },
      {
        "name": "minZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The minimum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "maxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The maximum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "style",
        "required": false,
        "type": "custom",
        "default": "none",
        "description": "Customizable style attributes"
      }
    ],
    "name": "RasterLayer",
    "styles": [
      {
        "name": "visibility",
        "type": "enum",
        "description": "Whether this layer is displayed.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "rasterOpacity",
        "type": "number",
        "description": "The opacity at which the image will be drawn.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "rasterHueRotate",
        "type": "number",
        "description": "Rotates hues around the color wheel.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "rasterBrightnessMin",
        "type": "number",
        "description": "Increase or reduce the brightness of the image. The value is the minimum brightness.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "rasterBrightnessMax",
        "type": "number",
        "description": "Increase or reduce the brightness of the image. The value is the maximum brightness.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "rasterSaturation",
        "type": "number",
        "description": "Increase or reduce the saturation of the image.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "rasterContrast",
        "type": "number",
        "description": "Increase or reduce the contrast of the image.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "rasterFadeDuration",
        "type": "number",
        "description": "Fade duration when a new tile is added.",
        "requires": [],
        "disabledBy": []
      }
    ]
  },
  "RasterSource": {
    "description": "RasterSource is a map content source that supplies raster image tiles to be shown on the map.\nThe location of and metadata about the tiles are defined either by an option dictionary\nor by an external file that conforms to the TileJSON specification.",
    "methods": [],
    "props": [
      {
        "name": "id",
        "required": false,
        "type": "string",
        "default": "MapboxGL.StyleSource.DefaultSourceID",
        "description": "A string that uniquely identifies the source."
      },
      {
        "name": "url",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "A URL to a TileJSON configuration file describing the source’s contents and other metadata."
      },
      {
        "name": "minZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "An unsigned integer that specifies the minimum zoom level at which to display tiles from the source.\nThe value should be between 0 and 22, inclusive, and less than\nmaxZoomLevel, if specified. The default value for this option is 0."
      },
      {
        "name": "maxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "An unsigned integer that specifies the maximum zoom level at which to display tiles from the source.\nThe value should be between 0 and 22, inclusive, and less than\nminZoomLevel, if specified. The default value for this option is 22."
      },
      {
        "name": "tileSize",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Size of the map tiles.\nMapbox urls default to 256, all others default to 512."
      },
      {
        "name": "tms",
        "required": false,
        "type": "bool",
        "default": "none",
        "description": "Influences the y direction of the tile coordinates. (tms inverts y axis)"
      },
      {
        "name": "attribution",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "An HTML or literal text string defining the buttons to be displayed in an action sheet when the\nsource is part of a map view’s style and the map view’s attribution button is pressed."
      }
    ],
    "name": "RasterSource"
  },
  "ShapeSource": {
    "description": "ShapeSource is a map content source that supplies vector shapes to be shown on the map.\nThe shape may be a url or a GeoJSON object",
    "methods": [],
    "props": [
      {
        "name": "id",
        "required": false,
        "type": "string",
        "default": "MapboxGL.StyleSource.DefaultSourceID",
        "description": "A string that uniquely identifies the source."
      },
      {
        "name": "url",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "An HTTP(S) URL, absolute file URL, or local file URL relative to the current application’s resource bundle."
      },
      {
        "name": "shape",
        "required": false,
        "type": "object",
        "default": "none",
        "description": "The contents of the source. A shape can represent a GeoJSON geometry, a feature, or a feature colllection."
      },
      {
        "name": "cluster",
        "required": false,
        "type": "bool",
        "default": "none",
        "description": "Enables clustering on the source for point shapes."
      },
      {
        "name": "clusterRadius",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Specifies the radius of each cluster if clustering is enabled.\nA value of 512 produces a radius equal to the width of a tile.\nThe default value is 50."
      },
      {
        "name": "clusterMaxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Specifies the maximum zoom level at which to cluster points if clustering is enabled.\nDefaults to one zoom level less than the value of maxZoomLevel so that, at the maximum zoom level,\nthe shapes are not clustered."
      },
      {
        "name": "maxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Specifies the maximum zoom level at which to create vector tiles.\nA greater value produces greater detail at high zoom levels.\nThe default value is 18."
      },
      {
        "name": "buffer",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Specifies the size of the tile buffer on each side.\nA value of 0 produces no buffer. A value of 512 produces a buffer as wide as the tile itself.\nLarger values produce fewer rendering artifacts near tile edges and slower performance.\nThe default value is 128."
      },
      {
        "name": "tolerance",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Specifies the Douglas-Peucker simplification tolerance.\nA greater value produces simpler geometries and improves performance.\nThe default value is 0.375."
      },
      {
        "name": "images",
        "required": false,
        "type": "object",
        "default": "none",
        "description": "Specifies the external images in key-value pairs required for the shape source."
      }
    ],
    "name": "ShapeSource"
  },
  "SymbolLayer": {
    "description": "SymbolLayer is a style layer that renders icon and text labels at points or along lines on the map.",
    "methods": [],
    "props": [
      {
        "name": "id",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "A string that uniquely identifies the source in the style to which it is added."
      },
      {
        "name": "sourceID",
        "required": false,
        "type": "string",
        "default": "MapboxGL.StyleSource.DefaultSourceID",
        "description": "The source from which to obtain the data to style. If the source has not yet been added to the current style, the behavior is undefined."
      },
      {
        "name": "sourceLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Identifier of the layer within the source identified by the sourceID property from which the receiver obtains the data to style."
      },
      {
        "name": "aboveLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer above aboveLayerID."
      },
      {
        "name": "belowLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer below belowLayerID"
      },
      {
        "name": "layerIndex",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Inserts a layer at a specified index"
      },
      {
        "name": "filter",
        "required": false,
        "type": "array",
        "default": "none",
        "description": "Filter only the features in the source layer that satisfy a condition that you define"
      },
      {
        "name": "minZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The minimum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "maxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The maximum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "style",
        "required": false,
        "type": "custom",
        "default": "none",
        "description": "Customizable style attributes"
      }
    ],
    "name": "SymbolLayer",
    "styles": [
      {
        "name": "symbolPlacement",
        "type": "enum",
        "description": "Label placement relative to its geometry.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "symbolSpacing",
        "type": "number",
        "description": "Distance between two symbol anchors.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "symbolAvoidEdges",
        "type": "boolean",
        "description": "If true, the symbols will not cross tile edges to avoid mutual collisions. Recommended in layers that don't have enough padding in the vector tile to prevent collisions, or if it is a point symbol layer placed after a line symbol layer.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "iconAllowOverlap",
        "type": "boolean",
        "description": "If true, the icon will be visible even if it collides with other previously drawn symbols.",
        "requires": [
          "icon-image"
        ],
        "disabledBy": []
      },
      {
        "name": "iconIgnorePlacement",
        "type": "boolean",
        "description": "If true, other symbols can be visible even if they collide with the icon.",
        "requires": [
          "icon-image"
        ],
        "disabledBy": []
      },
      {
        "name": "iconOptional",
        "type": "boolean",
        "description": "If true, text will display without their corresponding icons when the icon collides with other symbols and the text does not.",
        "requires": [
          "icon-image",
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "iconRotationAlignment",
        "type": "enum",
        "description": "In combination with `symbol-placement`, determines the rotation behavior of icons.",
        "requires": [
          "icon-image"
        ],
        "disabledBy": []
      },
      {
        "name": "iconSize",
        "type": "number",
        "description": "Scales the original size of the icon by the provided factor. The new pixel size of the image will be the original pixel size multiplied by `icon-size`. 1 is the original size; 3 triples the size of the image.",
        "requires": [
          "icon-image"
        ],
        "disabledBy": []
      },
      {
        "name": "iconTextFit",
        "type": "enum",
        "description": "Scales the icon to fit around the associated text.",
        "requires": [
          "icon-image",
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "iconTextFitPadding",
        "type": "array",
        "description": "Size of the additional area added to dimensions determined by `icon-text-fit`, in clockwise order: top, right, bottom, left.",
        "requires": [
          "icon-image",
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "iconImage",
        "type": "string",
        "description": "Name of image in sprite to use for drawing an image background. A string with {tokens} replaced, referencing the data property to pull from.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "iconRotate",
        "type": "number",
        "description": "Rotates the icon clockwise.",
        "requires": [
          "icon-image"
        ],
        "disabledBy": []
      },
      {
        "name": "iconPadding",
        "type": "number",
        "description": "Size of the additional area around the icon bounding box used for detecting symbol collisions.",
        "requires": [
          "icon-image"
        ],
        "disabledBy": []
      },
      {
        "name": "iconKeepUpright",
        "type": "boolean",
        "description": "If true, the icon may be flipped to prevent it from being rendered upside-down.",
        "requires": [
          "icon-image"
        ],
        "disabledBy": []
      },
      {
        "name": "iconOffset",
        "type": "array",
        "description": "Offset distance of icon from its anchor. Positive values indicate right and down, while negative values indicate left and up. When combined with `icon-rotate` the offset will be as if the rotated direction was up.",
        "requires": [
          "icon-image"
        ],
        "disabledBy": []
      },
      {
        "name": "textPitchAlignment",
        "type": "enum",
        "description": "Orientation of text when map is pitched.",
        "requires": [
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "textRotationAlignment",
        "type": "enum",
        "description": "In combination with `symbol-placement`, determines the rotation behavior of the individual glyphs forming the text.",
        "requires": [
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "textField",
        "type": "string",
        "description": "Value to use for a text label. Feature properties are specified using tokens like {field_name}.  (Token replacement is only supported for literal `text-field` values--not for property functions.)",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "textFont",
        "type": "array",
        "description": "Font stack to use for displaying text.",
        "requires": [
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "textSize",
        "type": "number",
        "description": "Font size.",
        "requires": [
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "textMaxWidth",
        "type": "number",
        "description": "The maximum line width for text wrapping.",
        "requires": [
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "textLineHeight",
        "type": "number",
        "description": "Text leading value for multi-line text.",
        "requires": [
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "textLetterSpacing",
        "type": "number",
        "description": "Text tracking amount.",
        "requires": [
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "textJustify",
        "type": "enum",
        "description": "Text justification options.",
        "requires": [
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "textAnchor",
        "type": "enum",
        "description": "Part of the text placed closest to the anchor.",
        "requires": [
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "textMaxAngle",
        "type": "number",
        "description": "Maximum angle change between adjacent characters.",
        "requires": [
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "textRotate",
        "type": "number",
        "description": "Rotates the text clockwise.",
        "requires": [
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "textPadding",
        "type": "number",
        "description": "Size of the additional area around the text bounding box used for detecting symbol collisions.",
        "requires": [
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "textKeepUpright",
        "type": "boolean",
        "description": "If true, the text may be flipped vertically to prevent it from being rendered upside-down.",
        "requires": [
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "textTransform",
        "type": "enum",
        "description": "Specifies how to capitalize text, similar to the CSS `text-transform` property.",
        "requires": [
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "textOffset",
        "type": "array",
        "description": "Offset distance of text from its anchor. Positive values indicate right and down, while negative values indicate left and up.",
        "requires": [
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "textAllowOverlap",
        "type": "boolean",
        "description": "If true, the text will be visible even if it collides with other previously drawn symbols.",
        "requires": [
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "textIgnorePlacement",
        "type": "boolean",
        "description": "If true, other symbols can be visible even if they collide with the text.",
        "requires": [
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "textOptional",
        "type": "boolean",
        "description": "If true, icons will display without their corresponding text when the text collides with other symbols and the icon does not.",
        "requires": [
          "text-field",
          "icon-image"
        ],
        "disabledBy": []
      },
      {
        "name": "visibility",
        "type": "enum",
        "description": "Whether this layer is displayed.",
        "requires": [],
        "disabledBy": []
      },
      {
        "name": "iconOpacity",
        "type": "number",
        "description": "The opacity at which the icon will be drawn.",
        "requires": [
          "icon-image"
        ],
        "disabledBy": []
      },
      {
        "name": "iconColor",
        "type": "color",
        "description": "The color of the icon. This can only be used with sdf icons.",
        "requires": [
          "icon-image"
        ],
        "disabledBy": []
      },
      {
        "name": "iconHaloColor",
        "type": "color",
        "description": "The color of the icon's halo. Icon halos can only be used with SDF icons.",
        "requires": [
          "icon-image"
        ],
        "disabledBy": []
      },
      {
        "name": "iconHaloWidth",
        "type": "number",
        "description": "Distance of halo to the icon outline.",
        "requires": [
          "icon-image"
        ],
        "disabledBy": []
      },
      {
        "name": "iconHaloBlur",
        "type": "number",
        "description": "Fade out the halo towards the outside.",
        "requires": [
          "icon-image"
        ],
        "disabledBy": []
      },
      {
        "name": "iconTranslate",
        "type": "array",
        "description": "Distance that the icon's anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.",
        "requires": [
          "icon-image"
        ],
        "disabledBy": []
      },
      {
        "name": "iconTranslateAnchor",
        "type": "enum",
        "description": "Controls the translation reference point.",
        "requires": [
          "icon-image",
          "icon-translate"
        ],
        "disabledBy": []
      },
      {
        "name": "textOpacity",
        "type": "number",
        "description": "The opacity at which the text will be drawn.",
        "requires": [
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "textColor",
        "type": "color",
        "description": "The color with which the text will be drawn.",
        "requires": [
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "textHaloColor",
        "type": "color",
        "description": "The color of the text's halo, which helps it stand out from backgrounds.",
        "requires": [
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "textHaloWidth",
        "type": "number",
        "description": "Distance of halo to the font outline. Max text halo width is 1/4 of the font-size.",
        "requires": [
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "textHaloBlur",
        "type": "number",
        "description": "The halo's fadeout distance towards the outside.",
        "requires": [
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "textTranslate",
        "type": "array",
        "description": "Distance that the text's anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.",
        "requires": [
          "text-field"
        ],
        "disabledBy": []
      },
      {
        "name": "textTranslateAnchor",
        "type": "enum",
        "description": "Controls the translation reference point.",
        "requires": [
          "text-field",
          "text-translate"
        ],
        "disabledBy": []
      }
    ]
  },
  "VectorSource": {
    "description": "VectorSource is a map content source that supplies tiled vector data in Mapbox Vector Tile format to be shown on the map.\nThe location of and metadata about the tiles are defined either by an option dictionary or by an external file that conforms to the TileJSON specification.",
    "methods": [],
    "props": [
      {
        "name": "id",
        "required": false,
        "type": "string",
        "default": "MapboxGL.StyleSource.DefaultSourceID",
        "description": "A string that uniquely identifies the source."
      },
      {
        "name": "url",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "A URL to a TileJSON configuration file describing the source’s contents and other metadata."
      }
    ],
    "name": "VectorSource"
  }
}